CREATE TRIGGER after_promotion_insert
AFTER INSERT ON promotions
FOR EACH ROW
BEGIN
    UPDATE product_batches pb
    JOIN promotion_details pd ON pb.id = pd.product_batch_id
    SET pb.current_discount = calculate_batch_discount(
        pb.id,
        get_remaining_hours(pb.expiration_date)
    )
    WHERE pd.promotion_id = NEW.id;
END //
CREATE TRIGGER after_promotion_update
AFTER UPDATE ON promotions
FOR EACH ROW
BEGIN
    UPDATE product_batches pb
    JOIN promotion_details pd ON pb.id = pd.product_batch_id
    SET pb.current_discount = calculate_batch_discount(
        pb.id,
        get_remaining_hours(pb.expiration_date)
    )
    WHERE pd.promotion_id = NEW.id;
END //
CREATE TRIGGER after_promotion_delete
AFTER DELETE ON promotions
FOR EACH ROW
BEGIN
    UPDATE product_batches pb
    JOIN promotion_details pd ON pb.id = pd.product_batch_id
    SET pb.current_discount = calculate_batch_discount(
        pb.id,
        get_remaining_hours(pb.expiration_date)
    )
    WHERE pd.promotion_id = OLD.id;
END //

DELIMITER //
CREATE TRIGGER before_insert_product_batches
BEFORE INSERT ON product_batches
FOR EACH ROW
BEGIN
    DECLARE shelf_life INT;
    DECLARE prod_date DATETIME;

    -- Lấy shelf_life_days (đã là số ngày) từ bảng products
    SELECT shelf_life_days INTO shelf_life
    FROM products
    WHERE id = NEW.product_id;

    -- Lấy ngày sản xuất
    SELECT production_date INTO prod_date
    FROM daily_productions
    WHERE id = NEW.daily_production_id;

    -- Tính ngày hết hạn bằng cách cộng trực tiếp số ngày
    SET NEW.expiration_date = DATE_ADD(prod_date, INTERVAL shelf_life DAY);
END;
//

DELIMITER ;


DELIMITER //

SET GLOBAL event_scheduler = ON;

CREATE EVENT update_product_batch_status
ON SCHEDULE EVERY 1 HOUR
STARTS CURRENT_TIMESTAMP
DO
BEGIN
    UPDATE product_batches pb
    INNER JOIN products p ON pb.product_id = p.id
    INNER JOIN daily_productions dp ON pb.daily_production_id = dp.id
    SET pb.status = 'NEAR_EXPIRY'
    WHERE pb.status = 'ACTIVE'
    AND TIMESTAMPDIFF(HOUR, NOW(), pb.expiration_date) <= p.shelf_life_days_warning;
    UPDATE product_batches pb
    SET pb.status = 'EXPIRED'
    WHERE pb.status IN ('ACTIVE', 'NEAR_EXPIRY')
    AND pb.expiration_date <= NOW();
END;
//

CREATE TRIGGER check_product_batch_status
BEFORE INSERT ON product_batches
FOR EACH ROW
BEGIN
    DECLARE warning_hours INT;

    SELECT shelf_life_days_warning
    INTO warning_hours
    FROM products
    WHERE id = NEW.product_id;

    IF TIMESTAMPDIFF(HOUR, NOW(), NEW.expiration_date) <= warning_hours THEN
        SET NEW.status = 'NEAR_EXPIRY';
    END IF;

    IF NEW.expiration_date <= NOW() THEN
        SET NEW.status = 'EXPIRED';
    END IF;
END;
//

DELIMITER ;
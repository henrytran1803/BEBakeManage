CREATE TRIGGER after_promotion_insert
AFTER INSERT ON promotions
FOR EACH ROW
BEGIN
    UPDATE product_batches pb
    JOIN promotion_details pd ON pb.id = pd.product_batch_id
    SET pb.current_discount = calculate_batch_discount(
        pb.id,
        get_remaining_hours(pb.expiration_date)
    )
    WHERE pd.promotion_id = NEW.id;
END //
CREATE TRIGGER after_promotion_update
AFTER UPDATE ON promotions
FOR EACH ROW
BEGIN
    UPDATE product_batches pb
    JOIN promotion_details pd ON pb.id = pd.product_batch_id
    SET pb.current_discount = calculate_batch_discount(
        pb.id,
        get_remaining_hours(pb.expiration_date)
    )
    WHERE pd.promotion_id = NEW.id;
END //
CREATE TRIGGER after_promotion_delete
AFTER DELETE ON promotions
FOR EACH ROW
BEGIN
    UPDATE product_batches pb
    JOIN promotion_details pd ON pb.id = pd.product_batch_id
    SET pb.current_discount = calculate_batch_discount(
        pb.id,
        get_remaining_hours(pb.expiration_date)
    )
    WHERE pd.promotion_id = OLD.id;
END //

DELIMITER //

CREATE TRIGGER before_insert_product_batches
BEFORE INSERT ON product_batches
FOR EACH ROW
BEGIN
    DECLARE shelf_life INT;
    DECLARE prod_date DATETIME;

    SELECT shelf_life_days INTO shelf_life
    FROM products
    WHERE id = NEW.product_id;

    SELECT production_date INTO prod_date
    FROM daily_productions
    WHERE id = NEW.daily_production_id;

    SET NEW.expiration_date = DATE_ADD(prod_date, INTERVAL shelf_life DAY);
END;
//

DELIMITER ;